

# This file was *autogenerated* from the file build-siav-list-json.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4)
def siav_info(f):
    R = ZZ['x']; (x,) = R._first_ngens(1)
    S = ZZ['y']; (y,) = S._first_ngens(1)
    g = ZZ(f.degree()/_sage_const_2 )
    p,_ = ZZ(f(_sage_const_0 )).perfect_power()
    a = ZZ(log(f(_sage_const_0 ),p)/g)
    q = p**a

    K = NumberField(f, names=('pi',)); (pi,) = K._first_ngens(1)
    B = K.ring_of_integers().basis()
    M = Matrix([b.vector() for b in B]).transpose().inverse()
    F,iota = K.maximal_totally_real_subfield()

    return {
        # Weil number stuff
        "f": str(f),
        "p": str(p),
        "a": str(a),
        "q": str(q),
        "croots": [str(z) for z,_ in f.roots(ring=CC)],
        # AV stuff
        "g": str(g),
        "N": str(ZZ(f(_sage_const_1 ))),
        "NP": [str(QQ(a)) for a in pari.newtonpoly(f,p)],
        "AP": str(list(pari.newtonpoly(f,_sage_const_2 )).count(_sage_const_0 )),
        "OR": list(pari.newtonpoly(f,_sage_const_2 )).count(_sage_const_0 ) == g,
        "F": [[str(a) for a in r] for r in Matrix([M*(pi*b).vector() for b in B]).transpose()],
        "V": [[str(a) for a in r] for r in Matrix([M*(pi.conjugate()*b).vector() for b in B]).transpose()],
        "PP": not ((pi-pi.conjugate()).norm() == _sage_const_1  and f[g]%(_sage_const_4  if q == _sage_const_2  else q) == (_sage_const_3  if q == _sage_const_2  else q-_sage_const_1 )),
        # CM Field stuff
        "Kf": str(K.optimized_representation()[_sage_const_0 ].polynomial()),
        "K+f": "y - 1" if F.degree() == _sage_const_1  else str(F.optimized_representation()[_sage_const_0 ].polynomial()(y)),
        "Kdisc": str(K.disc()),
        "K+disc": str(_sage_const_1  if F.degree() == _sage_const_1  else F.disc()),
        "Kdeg": str(K.degree()),
        "K+deg": str(F.degree()),
    }

# TODO: read siav-list.json
#       and skip things done before

arr = load("siav-list.sobj")
from tqdm import tqdm
brr = []
for f in tqdm(arr):
    brr.append(siav_info(f))
import json
s = json.dumps(brr)
with open("siav-list.json","w") as f:
    f.write(s)

